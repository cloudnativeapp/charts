apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "cassandra.fullname" . }}
  labels:
    app: {{ template "cassandra.name" . }}
    chart: {{ template "cassandra.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "cassandra.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "cassandra.fullname" . }}-headless
  replicas: {{ .Values.cluster.replicaCount }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy }}
    {{- if (eq "Recreate" .Values.statefulset.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.statefulset.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "cassandra.name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "cassandra.chart" . }}
{{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
{{- end }}
{{- if or .Values.podAnnotations .Values.metrics.enabled }}
      annotations:
    {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
{{ toYaml .Values.metrics.podAnnotations | indent 8 }}
    {{- end }}
{{- end }}
    spec:
{{- if .Values.selector }}
{{ toYaml .Values.selector | indent 6 }}
{{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
{{- include "cassandra.imagePullSecrets" . | indent 6 }}
      containers:
      - name: cassandra
        command:
          - bash
          - -ec
          # Node 0 is the password seeder
          - |
              if [[ $HOSTNAME =~ (.*)-0$ ]]; then
                echo "Setting node as password seeder"
                export CASSANDRA_PASSWORD_SEEDER=yes
              else
                # Only node 0 will execute the startup initdb scripts
                export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /app-entrypoint.sh /run.sh
        image: {{ template "cassandra.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: CASSANDRA_CLUSTER_NAME
          value: {{ .Values.cluster.name }}
        - name: CASSANDRA_SEEDS
          {{- $global := . }}
          {{- $replicas := .Values.cluster.seedCount | int }}
          value: "{{- range $i, $e := until $replicas }}{{ template "cassandra.fullname" $global }}-{{ $i }}.{{ template "cassandra.fullname" $global }}-headless.{{ $global.Release.Namespace }}.svc.cluster.local{{- if (lt ( add1 $i ) $replicas ) }},{{- end }}{{- end }}"
        - name: CASSANDRA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.dbUser.existingSecret }}{{ .Values.dbUser.existingSecret }}{{- else }}{{ template "cassandra.fullname" . }}{{- end }}
              key: cassandra-password
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CASSANDRA_NUM_TOKENS
          value: {{ .Values.cluster.numTokens | quote }}
        - name: CASSANDRA_DATACENTER
          value: {{ .Values.cluster.datacenter }}
        - name: CASSANDRA_ENDPOINT_SNITCH
          value: {{ .Values.cluster.endpointSnitch }}
{{- if .Values.tlsEncryptionSecretName }}
        - name: CASSANDRA_INTERNODE_ENCRYPTION
          value: {{ .Values.cluster.internodeEncryption | quote }}
        - name: CASSANDRA_CLIENT_ENCRYPTION
          value: {{ .Values.cluster.clientEncryption | quote }}
        - name: CASSANDRA_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tlsEncryptionSecretName }}
              key: truststore-password
        - name: CASSANDRA_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tlsEncryptionSecretName }}
              key: keystore-password
{{- end }}
        - name: CASSANDRA_ENDPOINT_SNITCH
          value: {{ .Values.cluster.endpointSnitch }}
        - name: CASSANDRA_RACK
          value: {{ .Values.cluster.rack }}
        {{- if .Values.jvm.maxHeapSize }}
        - name: MAX_HEAP_SIZE
          value: {{ .Values.jvm.maxHeapSize | quote }}
        {{- end }}
        {{- if .Values.jvm.newHeapSize }}
        - name: HEAP_NEWSIZE
          value: {{ .Values.jvm.newHeapSize | quote }}
        {{- end }}
        {{- if .Values.jvm.extraOpts }}
        - name: JVM_EXTRA_OPTS
          value: {{ .Values.jvm.extraOpts | quote }}
        {{- end }}
        - name: CASSANDRA_ENABLE_RPC
          value: {{ .Values.cluster.enableRPC | quote }}
{{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status" ]
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
{{- end }}
{{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status | grep -E \"^UN\\s+${POD_IP}\"" ]
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
{{- end }}
{{- if not .Values.persistence.enabled }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "nodetool decommission"]
{{- end }}
        ports:
        - name: intra
          containerPort: 7000
        - name: tls
          containerPort: 7001
        - name: jmx
          containerPort: 7199
        - name: cql
          containerPort: 9042
{{- if .Values.cluster.enableRPC }}
        - name: thrift
          containerPort: 9160
{{- end }}
        volumeMounts:
        - name: data
          mountPath: /bitnami/cassandra
{{- if .Values.tlsEncryptionSecretName }}
        - name: encryption-secrets
          mountPath: /bitnami/cassandra/secrets
{{- end }}
      {{- if or (.Files.Glob "files/docker-entrypoint-initdb.d/*") (.Values.initDBConfigMap) }}
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
      {{- end }}
      {{ if or (.Files.Glob "files/conf/*") .Values.existingConfiguration }}
        - name: configurations
          mountPath: /bitnami/cassandra/conf
      {{- end }}
{{- if .Values.metrics.enabled }}
      - name: metrics
        image: {{ template "cassandra.metrics.image" . }}
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
        ports:
          - name: metrics
            containerPort: 8080
            protocol: TCP
          - name: jmx
            containerPort: 5555
        livenessProbe:
          tcpSocket:
            port: metrics
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 20
          timeoutSeconds: 45
{{- end }}
      volumes:
{{- if .Values.tlsEncryptionSecretName }}
      - name: encryption-secrets
        secret:
          secretName: {{ .Values.tlsEncryptionSecretName }}
          items:
          - key: keystore
            path: keystore
          - key: truststore
            path: truststore
{{- end }}
{{- if or (.Files.Glob "files/conf/*") .Values.existingConfiguration }}
      - name: configurations
        configMap:
          name: {{ template "cassandra.configurationCM" . }}
{{- end }}
{{- if or (.Files.Glob "files/docker-entrypoint-initdb.d/*") (.Values.initDBConfigMap) }}
      - name: init-db
        configMap:
          name: {{ template "cassandra.initDbCM" . }}
{{- end }}
{{- if not .Values.persistence.enabled }}
      - name: data
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: {{ template "cassandra.name" . }}
        chart: {{ template "cassandra.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
{{- if .Values.persistence.annotations }}
      annotations:
{{ toYaml .Values.persistence.annotations | indent 8 }}
{{- end }}
    spec:
      accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
    {{- end }}
    {{- end }}
{{- end }}
