apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "external-dns.fullname" . }}
  labels:
    app: {{ template "external-dns.name" . }}
    chart: {{ template "external-dns.chart" .  }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  selector:
    matchLabels:
      app: {{ template "external-dns.name" . }}
      release: "{{ .Release.Name }}"
  replicas: {{ .Values.replicas }}
  template:
    metadata:
     name: {{ template "external-dns.fullname" . }}
     labels:
       app: {{ template "external-dns.name" . }}
       chart: {{ template "external-dns.chart" .  }}
       release: {{ .Release.Name | quote }}
       heritage: {{ .Release.Service | quote }}
{{- if or .Values.podAnnotations .Values.metrics.enabled }}
     annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.metrics.podAnnotations }}
{{ toYaml .Values.metrics.podAnnotations | indent 8 }}
{{- end }}
{{- end }}
    spec:
{{- include "external-dns.imagePullSecrets" . | indent 6 }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.rbac.create }}
      serviceAccountName: {{ template "external-dns.fullname" . }}
      {{- else }}
      serviceAccountName: {{ .Values.rbac.serviceAccountName | quote }}
      {{- end }}
      containers:
      - name: {{ template "external-dns.name" . }}
        image: "{{ template "external-dns.image" . }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        args:
        # Generic arguments
        - --policy={{ .Values.policy }}
        - --provider={{ required "A provider is required to deploy the chart" .Values.provider }}
        - --registry={{ .Values.registry }}
        {{- if .Values.logLevel }}
        - --log-level={{ .Values.logLevel }}
        {{- end }}
        {{- if .Values.publishInternalServices }}
        - --publish-internal-services
        {{- end }}
        {{- if eq .Values.registry "txt" }}
        - --txt-owner-id={{ .Values.txtOwnerId }}
        {{- if .Values.txtPrefix }}
        - --txt-prefix={{ .Values.txtPrefix }}
        {{- end }}
        {{- end }}
        {{- range .Values.sources }}
        - --source={{ . }}
        {{- end }}
        {{- range .Values.domainFilters }}
        - --domain-filter={{ . }}
        {{- end }}
        {{- if .Values.annotationFilter }}
        - --annotation-filter={{ .Values.annotationFilter }}
        {{- end }}
        {{- range $key, $value := .Values.extraArgs }}
          {{- if $value }}
        - --{{ $key }}={{ $value }}
          {{- else }}
        - --{{ $key }}
          {{- end }}
        {{- end }}

        {{- if eq .Values.provider "aws" }}
        {{- if .Values.aws.zoneType }}
        - --aws-zone-type={{ .Values.aws.zoneType }}
        {{- end }}
        {{- end }}

        {{- if eq .Values.provider "azure" }}
        {{- if .Values.azure.resoureGroup }}
        --azure-resource-group={{ .Values.azure.resoureGroup }}
        {{- end }}
        {{- end }}

        {{- if eq .Values.provider "google" }}
        {{- if .Values.google.project }}
        - --google-project={{ .Values.google.project }}
        {{- end }}
        {{- end }}

        env:
        {{- if .Values.image.debug }}
        - name: BASH_DEBUG
          value: "1"
        - name: NAMI_DEBUG
          value: "1"
        - name: NAMI_LOG_LEVEL
          value: "trace8"
        {{- end }}
        {{- $root := . -}}
        {{- range $key, $value := .Values.extraEnv }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ template "external-dns.fullname" $root }}
              key: {{ $key }}
        {{- end }}

        {{- if eq .Values.provider "aws" }}
        - name: AWS_DEFAULT_REGION
          value: {{ .Values.aws.region }}
        - name: AWS_CONFIG_FILE
          value: /etc/secrets/aws/config
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /etc/secrets/aws/credentials
        {{- end }}

        {{- if eq .Values.provider "cloudflare" }}
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "external-dns.fullname" . }}
              key: cloudflare_api_key
        - name: CF_API_EMAIL
          value: {{ .Values.cloudflare.email | quote }}
        {{- end }}

        {{- if eq .Values.provider "google" }}
        {{- if .Values.google.serviceAccountSecret }}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /etc/secrets/service-account/credentials.json
        {{- end }}
        {{- end }}

        ports:
        - containerPort: {{ .Values.service.port }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        {{- if eq .Values.provider "aws" }}
        - name: aws-credentials
          mountPath: /etc/secrets/aws/
          readOnly: true
        {{- end }}

        {{- if eq .Values.provider "azure" }}
        - name: azure-config-file
          mountPath: /etc/kubernetes/azure.json
          readOnly: true
        {{- end }}

        {{- if eq .Values.provider "google" }}
        {{- if .Values.google.serviceAccountSecret }}
        - name: google-service-account
          mountPath: /etc/secrets/service-account/
        {{- end }}
        {{- end }}

      volumes:
      {{- if eq .Values.provider "aws" }}
      - name: aws-credentials
        secret:
          secretName: {{ template "external-dns.fullname" . }}
      {{- end }}

      {{- if eq .Values.provider "azure" }}
      - name: azure-config-file
        hostPath:
          path: /etc/kubernetes/azure.json
          type: File
      {{- end }}

      {{- if eq .Values.provider "google" }}
      {{- if .Values.google.serviceAccountSecret }}
      - name: google-service-account
        secret:
          secretName: {{ .Values.google.serviceAccountSecret | quote }}
      {{- end}}
      {{- end}}
