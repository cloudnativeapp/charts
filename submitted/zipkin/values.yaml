# Default values for zipkin.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

statefulset:
  enabled: false

## String to partially override fullname template (will maintain the release name)
##
nameOverride: ""

## String to fully override fullname template
##
fullnameOverride: ""

## By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25% .
## You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 25%
  # type: RollingUpdate

# 副本个数
replicaCount: 1

# 容器image及tag
image:
  repository: openzipkin/zipkin
  tag: 2
  pullPolicy: IfNotPresent # IfNotPresent: 有则不拉（减少流量和操作步骤），Always: 不管tag总拉（适合tag不变时更新）
  imagePullSecrets: []

service:
  type: ClusterIP  # 一般不用修改
  ports:
    # Port used for the Zipkin UI and HTTP Api
    web:  # ingress默认只暴露此名为web的端口
      port: 9411
      protocol: TCP
    # # Uncomment if you set SCRIBE_ENABLED=true
    # scribe:
    #   port: 9410
    #   protocol: TCP 

## env set
## ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
## 相同环境变量名，此处定义的优先生效
env: []
  # Uncomment to enable scribe
  # - SCRIBE_ENABLED=true
  # Uncomment to enable self-tracing
  # - SELF_TRACING_ENABLED=true
  # Uncomment to enable debug logging
  # - name: JAVA_OPTS
  #  value: -Dlogging.level.zipkin=DEBUG -Dlogging.level.zipkin2=DEBUG

dependencies:
  enabled: true
  # 容器image及tag
  image:
    repository: openzipkin/zipkin-dependencies
    tag: 2
    pullPolicy: IfNotPresent # IfNotPresent: 有则不拉（减少流量和操作步骤），Always: 不管tag总拉（适合tag不变时更新）
    imagePullSecrets: []
  schedule: "*/10 * * * *"

## command set
startCommand: []
#  - "java -Xdebug -Xnoagent -Djava.compiler=NONE"
#  - "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"
#  - "-Djava.security.egd=file:/dev/urandom"
#  - "-jar /test.jar"
#  - "-Duser.timezone=GMT+08"

## Enable configmap and add data in configmap
config:
  enabled: false
  mountPath: /conf
  # subPath: ""
  data: {}

## To use an additional secret, set enable to true and add data
secret:
  enabled: false
  mountPath: /etc/secret-volume
  # subPath: ""
  readOnly: true
  data: {}

## liveness and readiness 
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
healthCheck:
  enabled: true
  type: tcp  # http/tcp
  port: web  # 上面的端口名或端口
  httpPath: '/'  # http时必须设置
  livenessInitialDelaySeconds: 20  # 初始延迟秒数
  livenessPeriodSeconds: 10  # 检测周期，默认值10，最小为1
  readinessInitialDelaySeconds: 20  # 初始延迟秒数
  readinessPeriodSeconds: 10   # 检测周期，默认值10，最小为1
 
resources: {}
  # 容器资源设置
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Node labels and tolerations for pod assignment
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
labels: {}
podAnnotations: {}
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistentVolume:   # 是否存储持久化
  enabled: false
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  storageClass: "-"
  accessMode: ReadWriteOnce
  annotations: {}
  #   helm.sh/resource-policy: keep
  size: 1Gi  # 大小
  existingClaim: {}  # 使用已存在的pvc
  mountPaths: []
  #  - name: config
  #    mountPath: /config
  #    subPath: config
  #  - name: data-storage
  #    mountPath: /data
  #    subPath: data

ingress:  # 是否使用nginx暴露域名或端口
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## zipkin STORAGE_TYPE
## https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md
elasticsearch:
  # if enabled set "false", fill the connection informations in "external" section
  enabled: false 
  ## 使用外部ES或者使用其它存储方式，以下为环境变量定义
  external:
    STORAGE_TYPE: "elasticsearch"
    ES_HOSTS: "elasticsearch-client.devops:9200"

    ## Zipkin's Cassandra storage component supports version 3.11+ and applies when STORAGE_TYPE is set to cassandra3:
    ## * `CASSANDRA_KEYSPACE`: The keyspace to use. Defaults to "zipkin2"
    ## * `CASSANDRA_CONTACT_POINTS`: Comma separated list of host addresses part of Cassandra cluster. You can also specify a custom port with 'host:port'. Defaults to localhost on port 9042.
    ## * `CASSANDRA_LOCAL_DC`: Name of the datacenter that will be considered "local" for latency load balancing. When unset, load-balancing is round-robin.
    ## * `CASSANDRA_ENSURE_SCHEMA`: Ensuring cassandra has the latest schema. If enabled tries to execute scripts in the classpath prefixed with `cassandra-schema-cql3`. Defaults to true
    ## * `CASSANDRA_USERNAME` and `CASSANDRA_PASSWORD`: Cassandra authentication. Will throw an exception on startup if authentication fails. No default
    ## * `CASSANDRA_USE_SSL`: Requires `javax.net.ssl.trustStore` and `javax.net.ssl.trustStorePassword`, defaults to false.
    ## 
    ## Zipkin's MySQL component is tested against MySQL 5.7 and applies when STORAGE_TYPE is set to mysql:
    ## * `MYSQL_DB`: The database to use. Defaults to "zipkin".
    ## * `MYSQL_USER` and `MYSQL_PASS`: MySQL authentication, which defaults to empty string.
    ## * `MYSQL_HOST`: Defaults to localhost
    ## * `MYSQL_TCP_PORT`: Defaults to 3306
    ## * `MYSQL_MAX_CONNECTIONS`: Maximum concurrent connections, defaults to 10
    ## * `MYSQL_USE_SSL`: Requires `javax.net.ssl.trustStore` and `javax.net.ssl.trustStorePassword`, defaults to false.

  client:
    name: client
    replicas: 2
  
  master:
    name: master
    exposeHttp: false
    replicas: 3
    heapSize: "512m"
    persistence:
      enabled: false
      accessMode: ReadWriteOnce
      name: data
      size: "4Gi"
      storageClass: "-"
      
  data:
    name: data
    exposeHttp: false
    replicas: 2
    persistence:
      enabled: false
      accessMode: ReadWriteOnce
      name: data
      size: "30Gi"
      storageClass: "-"
    
## Uncomment and modify this to run a command after starting the core container.
## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/bash","/pre-stop.sh"]
  # postStart:
  #   exec:
  #     command: ["/bin/bash","/post-start.sh"]

deployment:
  additionalVolumes: []

## init containers
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## Add init containers. e.g. to be used to give specific permissions for data
## Add your own init container or uncomment and modify the given example.
initContainers: {}
#  - name: fmp-volume-permission
#    image: busybox
#    imagePullPolicy: IfNotPresent
#    command: ['chown','-R', '200', '/extra-data']
#    volumeMounts:
#      - name: extra-data
#        mountPath: /extra-data

additionalContainers: {}
## Additional containers to be added to the core pod.
#  - name: my-sidecar
#    image: nginx:latest
#  - name: lemonldap-ng-controller
#    image: lemonldapng/lemonldap-ng-controller:0.2.0
#    args:
#      - /lemonldap-ng-controller
#      - --alsologtostderr
#      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
#    env:
#      - name: POD_NAME
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.name
#      - name: POD_NAMESPACE
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.namespace
#    volumeMounts:
#    - name: copy-portal-skins
#      mountPath: /srv/var/lib/lemonldap-ng/portal/skins
